{"version":3,"file":"vonage-real-time-stats.js","mappings":"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","sources":["webpack://RealTimeStats/webpack/universalModuleDefinition","webpack://RealTimeStats/./node_modules/loglevel/lib/loglevel.js","webpack://RealTimeStats/./lib/utils/RealTimeStats.ts","webpack://RealTimeStats/./lib/utils/publisher.ts","webpack://RealTimeStats/webpack/bootstrap","webpack://RealTimeStats/./lib/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"RealTimeStats\"] = factory();\n\telse\n\t\troot[\"RealTimeStats\"] = factory();\n})(self, () => {\nreturn ","/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      defaultLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      function clearPersistedLevel() {\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage.removeItem(storageKey);\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n          } catch (ignore) {}\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          defaultLevel = level;\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.resetLevel = function () {\n          self.setLevel(defaultLevel, false);\n          clearPersistedLevel();\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n","import log, { error } from 'loglevel';\nimport { logPublisher, getRtcStats } from './publisher';\nimport { EventEmitter } from 'events';\n\n// import {loadTFLite} from './TFLiteLoader';\n// import {BackgroundEffect} from './background/backgroundEffect';\n// import {supportsDirectForwarding, VideoTrackToCanvas} from './VideoTrackToCanvas';\n// import {Dimensions} from '../types';\n\n/**\n * @private\n */\nexport interface RealTimeOptions {\n  /**\n   * The assets path where the models and tflite are loaded.\n   * These assets can be copied from the `dist/build` folder.\n   */\n  frameRateThreshold: number;\n\n  /**\n   * The output video stream's frame rate in fps\n   * @default\n   * ```html\n   * 30\n   * ```\n   */\n  intervalStats: number;\n\n  /**\n   * @private\n   */\n  triggerEvents?: boolean;\n}\n\nenum OutputState {\n  /**\n   * No output actively being sent\n   */\n  PAUSED,\n  /**\n   * The effect is applied to the output\n   */\n  EFFECT_APPLIED,\n  /**\n   * The input video is simply forwarded to the output\n   */\n  INPUT_FORWARDING,\n}\n\nexport class VideoNetworkQualityStats {\n  private readonly _assetsPath: string;\n  private readonly _useWasm: boolean;\n  public _publisher: OT.Publisher;\n  public _statsInterval: number;\n  private _interval: setInterval;\n\n  private readonly _inputVideoElement: HTMLVideoElement;\n  private readonly _outputCanvasElement: HTMLCanvasElement;\n  private readonly _outputCanvasCtx: CanvasRenderingContext2D;\n\n  private readonly _outputFramesPerSecond: number;\n  private readonly _maskFrameTimerWorker: any;\n\n  private _inputStream: MediaStream;\n  private _inputVideoTrack: MediaStreamTrack;\n\n  constructor(options: RealTimeOptions) {\n    // this._useWasm =\n    //   typeof options.useWasm === 'boolean' ? options.useWasm : true;\n    this._publisher = null;\n    this._statsInterval = options.intervalStats;\n\n    // this._maskFrameTimerWorker.onmessage = (e: MessageEvent) => {\n    //   if (e.data.id !== TIMEOUT_TICK) return;\n    //   this.renderFrame();\n    // };\n  }\n\n  /**\n   * Returns true if the video stream processing is paused\n   */\n  //   get paused(): boolean {\n  //     return this._outputState === OutputState.PAUSED;\n  //   }\n\n  setPublisher(publisher: OT.publisher) {\n    this._publisher = publisher;\n  }\n\n  startStats() {\n    setInterval(async () => {\n      //   this._publisher.getStats((err: any, resp: any) => {\n      //     console.log(resp);\n      //   });\n      const stats = await getRtcStats(this._publisher);\n      console.log(stats);\n      return stats;\n    }, this._statsInterval);\n  }\n\n  async getCypher(): Promise<string> {\n    return new Promise(async (res, rej) => {\n      const stats = await getRtcStats(this._publisher);\n      stats[0].rtcStatsReport.forEach((e: any) => {\n        if (e.type === 'transport') {\n          console.log(e.srtpCipher);\n          res(e.srtpCipher);\n        }\n      });\n    });\n  }\n\n  async getConnectionType(): Promise<string> {\n    return new Promise(async (res, rej) => {\n      const stats = await getRtcStats(this._publisher);\n      stats[0].rtcStatsReport.forEach((e: any) => {\n        if (e.type === 'local-candidate') {\n          if (e.candidateType === 'relay') {\n            res(`TURN ${e.relayProtocol}`);\n          } else {\n            res(e.protocol);\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * Pauses all ongoing video stream processing. This should be used when video isn't published to not use the CPU without any need for it.\n   */\n  pauseStreamProcessing(pause: boolean) {\n    console.log('ss');\n  }\n\n  /**\n   * If the effect is currently applied to the stream returned by the startEffect method.\n   */\n  //   get effectEnabled(): boolean {}\n\n  /**\n   * Enables or disables the effect on the stream returned by the startEffect method. If set to false, the input video track will simply be forwarded to the output.\n   * @param enable defines if the effect should be applied to the returned stream\n   */\n  //   enableEffect(enable: boolean) {\n  //     if (this.effectEnabled === enable) return;\n\n  //     this._effectEnabled = enable;\n  //     log.debug('effectEnabled changed to', enable);\n  //     if (this._outputState !== OutputState.PAUSED)\n  //       this.setOutputState(\n  //         enable ? OutputState.EFFECT_APPLIED : OutputState.INPUT_FORWARDING\n  //       );\n  //   }\n\n  private setOutputState(state: OutputState) {\n    // this.applyOutputState();\n  }\n\n  /**\n   * Returns the previously set media stream\n   */\n  //   public get inputStream(): MediaStream {\n  //     return this._inputStream;\n  //   }\n\n  /**\n   * Sets / changes the input stream to the given stream. The effect will be applied to this stream and then forwarded to the ouput.\n   * @param stream the stream to use for the video input\n   */\n\n  /**\n   * Returns the output stream with the effect applied to it\n   */\n\n  public destroy() {\n    log.debug('destroy');\n  }\n}\n","export function logPublisher(publisher: any): void {\n  console.log(publisher);\n}\n\nexport async function getRtcStats(publisher: OT.Publisher): Promise<any> {\n  return new Promise(async (res, rej) => {\n    try {\n      const stats = await publisher.getRtcStatsReport();\n      res(stats);\n      // stats[0].rtcStatsReport.forEach((e: any) => {\n      //   if (e.type === 'transport') {\n      //     console.log(e.srtpCipher);\n      //     res(e.srtpCipher);\n      //   }\n      // });\n    } catch (e) {\n      rej(e);\n    }\n  });\n}\n\nexport async function getSrtpCipher(stats: any): Promise<string> {\n  return new Promise(async (res, rej) => {\n    stats[0].rtcStatsReport.forEach((e: any) => {\n      if (e.type === 'transport') {\n        console.log(e.srtpCipher);\n        res(e.srtpCipher);\n      }\n    });\n  });\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import log from 'loglevel';\n\nimport { logPublisher, getRtcStats } from './utils/publisher';\n\nimport { VideoNetworkQualityStats } from './utils/RealTimeStats';\n\nwindow.OT = window.OT || {};\n\nif (process.env.NODE_ENV === 'production') {\n  log.setLevel('WARN');\n}\n\nwindow.OT.RealTimeStats = {\n  logPublisher,\n  getRtcStats,\n  VideoNetworkQualityStats,\n};\n\nexport { logPublisher, getRtcStats };\n"],"names":["root","factory","exports","module","define","amd","self","definition","noop","undefinedType","isIE","window","navigator","test","userAgent","logMethods","bindMethod","obj","methodName","method","bind","Function","prototype","call","e","apply","arguments","traceForIE","console","log","trace","realMethod","undefined","replaceLoggingMethods","level","loggerName","i","length","this","methodFactory","debug","enableLoggingWhenConsoleArrives","defaultMethodFactory","Logger","name","defaultLevel","currentLevel","storageKey","persistLevelIfPossible","levelNum","levelName","toUpperCase","localStorage","ignore","document","cookie","encodeURIComponent","getPersistedLevel","storedLevel","location","indexOf","exec","slice","levels","clearPersistedLevel","removeItem","getLevel","setLevel","persist","SILENT","setDefaultLevel","resetLevel","enableAll","TRACE","disableAll","initialLevel","defaultLogger","_loggersByName","getLogger","TypeError","logger","_log","noConflict","getLoggers","OutputState","constructor","options","_publisher","_statsInterval","intervalStats","setPublisher","publisher","startStats","setInterval","async","stats","getRtcStats","Promise","res","rej","rtcStatsReport","forEach","type","srtpCipher","candidateType","relayProtocol","protocol","pauseStreamProcessing","pause","setOutputState","state","destroy","getRtcStatsReport","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","logPublisher","get","OT","RealTimeStats","VideoNetworkQualityStats"],"sourceRoot":""}